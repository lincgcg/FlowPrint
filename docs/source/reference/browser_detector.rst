.. _BrowserDetector:

BrowserDetector
===============

.. note::
    The BrowserDetector is currently not supported in the command line interface nor is it used in the fingerprint generation of the other classes.
    Currently, this is only supported as a stand-alone API.

The BrowserDetector class is used as a supervised detector to isolate browser Flows from regular app traffic.

.. autoclass:: browser_detector.BrowserDetector

.. automethod:: browser_detector.BrowserDetector.__init__

Browser Detection
^^^^^^^^^^^^^^^^^
We first need to :py:meth:`browser_detector.BrowserDetector.fit` (train) the BrowserDetector with Flows from both browser and non-browser apps.
Next, we can :py:meth:`browser_detector.BrowserDetector.predict` whether new :ref:`Flow`'s are browser or non-browser flows.
Or we can do both in a single step using the :py:meth:`browser_detector.BrowserDetector.fit_predict` method.

.. automethod:: browser_detector.BrowserDetector.fit

.. automethod:: browser_detector.BrowserDetector.predict

.. automethod:: browser_detector.BrowserDetector.fit_predict

Feature extraction
^^^^^^^^^^^^^^^^^^
The BrowserDetector uses several features from each Flow to determine whether a Flow was generated by a browser or non-browser app.
The :py:meth:`browser_detector.BrowserDetector.features` method extracts these features.

.. automethod:: browser_detector.BrowserDetector.features
